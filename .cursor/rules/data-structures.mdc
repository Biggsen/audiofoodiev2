---
description: 
globs: 
alwaysApply: true
---

# Data Structures

## Users Collection

```typescript
interface User {
  displayName: string;
  email: string;
  lastFmUserName: string;
}

// Example User Document
{
  displayName: "Biggs",
  email: "biggsy@pm.me"
  lastFmUserName: "biggzen"
}
```

### Field Descriptions

- `displayName`: User's display name in the application
- `email`: User's email address
- `lastFmUserName`: Last.FM username

## Playlists Collection

```typescript
interface Playlist {
  playlistId: string;          // Spotify playlist ID
  type: 'known' | 'new';
  category: 'queued' | 'curious' | 'interested' | 'great' | 'excellent' | 'wonderful';
  priority: number;    // Arbitrary number for flexible ordering (e.g. 10, 20, 25)
  userId: string;      // Reference to the user's document ID
  createdAt: timestamp;
  updatedAt: timestamp;
}

// Example Playlist Document
{
  playlistId: "spotify-playlist-id",
  type: "known",
  category: "wonderful",
  priority: 20,
  userId: "user123",
  createdAt: timestamp,
  updatedAt: timestamp
}
```

### Field Descriptions

- `playlistId`: The Spotify playlist ID
- `type`: Indicates if the playlist is for known or new artists
- `category`: The rating category of the playlist
- `priority`: Arbitrary number used for flexible ordering within categories
- `userId`: Reference to the user who owns this playlist
- `createdAt`: Timestamp when the playlist was created
- `updatedAt`: Timestamp when the playlist was last updated

### Notes
- The `priority` field can be any number, allowing for flexible ordering (e.g. 10, 20, 25)
- Playlist metadata (name, images, etc.) is fetched from Spotify API on demand
- Composite index required on `userId`, `type`, and `category` for efficient querying
