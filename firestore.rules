rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if user is accessing their own document
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Users collection rules
    match /users/{userId} {
      allow read, write: if isOwner(userId);
    }

    // Playlists collection rules
    match /playlists/{playlistId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow update, delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }

    // Albums collection rules
    match /albums/{albumId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && 
        request.resource.data.userEntries[request.auth.uid] != null;
    }

    // Album Mappings collection rules
    match /albumMappings/{mappingId} {
      allow read: if isAuthenticated();
      // No write access for regular users - mappings are managed by admins only
    }

    // This rule allows anyone with your Firestore database reference to view, edit,
    // and delete all data in your Firestore database. It is useful for getting
    // started, but it is configured to expire after 30 days because it
    // leaves your app open to attackers. At that time, all client
    // requests to your Firestore database will be denied.
    //
    // Make sure to write security rules for your app before that time, or else
    // all client requests to your Firestore database will be denied until you Update
    // your rules
    // match /{document=**} {
    //   allow read, write: if request.time < timestamp.date(2024, 1, 9);
    // }
  }
}